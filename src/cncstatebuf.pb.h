// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cncstatebuf.proto

#ifndef PROTOBUF_cncstatebuf_2eproto__INCLUDED
#define PROTOBUF_cncstatebuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace CncRemote {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cncstatebuf_2eproto();
void protobuf_InitDefaults_cncstatebuf_2eproto();
void protobuf_AssignDesc_cncstatebuf_2eproto();
void protobuf_ShutdownFile_cncstatebuf_2eproto();

class Axes;
class BoolAxes;
class CmdBuf;
class StateBuf;

enum SPINDLE {
  spinOFF = 0,
  spinFWD = 1,
  spinREV = 2
};
bool SPINDLE_IsValid(int value);
const SPINDLE SPINDLE_MIN = spinOFF;
const SPINDLE SPINDLE_MAX = spinREV;
const int SPINDLE_ARRAYSIZE = SPINDLE_MAX + 1;

// ===================================================================

class Axes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CncRemote.Axes) */ {
 public:
  Axes();
  virtual ~Axes();

  Axes(const Axes& from);

  inline Axes& operator=(const Axes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Axes& default_instance();

  static const Axes* internal_default_instance();

  void Swap(Axes* other);

  // implements Message ----------------------------------------------

  inline Axes* New() const { return New(NULL); }

  Axes* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Axes& from);
  void MergeFrom(const Axes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Axes* other);
  void UnsafeMergeFrom(const Axes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // optional double a = 4;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 4;
  double a() const;
  void set_a(double value);

  // optional double b = 5;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 5;
  double b() const;
  void set_b(double value);

  // optional double c = 6;
  bool has_c() const;
  void clear_c();
  static const int kCFieldNumber = 6;
  double c() const;
  void set_c(double value);

  // @@protoc_insertion_point(class_scope:CncRemote.Axes)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_c();
  inline void clear_has_c();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  double a_;
  double b_;
  double c_;
  friend void  protobuf_InitDefaults_cncstatebuf_2eproto_impl();
  friend void  protobuf_AddDesc_cncstatebuf_2eproto_impl();
  friend void protobuf_AssignDesc_cncstatebuf_2eproto();
  friend void protobuf_ShutdownFile_cncstatebuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Axes> Axes_default_instance_;

// -------------------------------------------------------------------

class BoolAxes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CncRemote.BoolAxes) */ {
 public:
  BoolAxes();
  virtual ~BoolAxes();

  BoolAxes(const BoolAxes& from);

  inline BoolAxes& operator=(const BoolAxes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const BoolAxes& default_instance();

  static const BoolAxes* internal_default_instance();

  void Swap(BoolAxes* other);

  // implements Message ----------------------------------------------

  inline BoolAxes* New() const { return New(NULL); }

  BoolAxes* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BoolAxes& from);
  void MergeFrom(const BoolAxes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoolAxes* other);
  void UnsafeMergeFrom(const BoolAxes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  bool x() const;
  void set_x(bool value);

  // optional bool y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  bool y() const;
  void set_y(bool value);

  // optional bool z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  bool z() const;
  void set_z(bool value);

  // optional bool a = 4;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 4;
  bool a() const;
  void set_a(bool value);

  // optional bool b = 5;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 5;
  bool b() const;
  void set_b(bool value);

  // optional bool c = 6;
  bool has_c() const;
  void clear_c();
  static const int kCFieldNumber = 6;
  bool c() const;
  void set_c(bool value);

  // @@protoc_insertion_point(class_scope:CncRemote.BoolAxes)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_c();
  inline void clear_has_c();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool x_;
  bool y_;
  bool z_;
  bool a_;
  bool b_;
  bool c_;
  friend void  protobuf_InitDefaults_cncstatebuf_2eproto_impl();
  friend void  protobuf_AddDesc_cncstatebuf_2eproto_impl();
  friend void protobuf_AssignDesc_cncstatebuf_2eproto();
  friend void protobuf_ShutdownFile_cncstatebuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BoolAxes> BoolAxes_default_instance_;

// -------------------------------------------------------------------

class StateBuf : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CncRemote.StateBuf) */ {
 public:
  StateBuf();
  virtual ~StateBuf();

  StateBuf(const StateBuf& from);

  inline StateBuf& operator=(const StateBuf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const StateBuf& default_instance();

  static const StateBuf* internal_default_instance();

  void Swap(StateBuf* other);

  // implements Message ----------------------------------------------

  inline StateBuf* New() const { return New(NULL); }

  StateBuf* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StateBuf& from);
  void MergeFrom(const StateBuf& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StateBuf* other);
  void UnsafeMergeFrom(const StateBuf& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CncRemote.Axes abs_pos = 2;
  bool has_abs_pos() const;
  void clear_abs_pos();
  static const int kAbsPosFieldNumber = 2;
  const ::CncRemote::Axes& abs_pos() const;
  ::CncRemote::Axes* mutable_abs_pos();
  ::CncRemote::Axes* release_abs_pos();
  void set_allocated_abs_pos(::CncRemote::Axes* abs_pos);

  // optional .CncRemote.Axes offset_work = 3;
  bool has_offset_work() const;
  void clear_offset_work();
  static const int kOffsetWorkFieldNumber = 3;
  const ::CncRemote::Axes& offset_work() const;
  ::CncRemote::Axes* mutable_offset_work();
  ::CncRemote::Axes* release_offset_work();
  void set_allocated_offset_work(::CncRemote::Axes* offset_work);

  // optional .CncRemote.Axes offset_fixture = 4;
  bool has_offset_fixture() const;
  void clear_offset_fixture();
  static const int kOffsetFixtureFieldNumber = 4;
  const ::CncRemote::Axes& offset_fixture() const;
  ::CncRemote::Axes* mutable_offset_fixture();
  ::CncRemote::Axes* release_offset_fixture();
  void set_allocated_offset_fixture(::CncRemote::Axes* offset_fixture);

  // optional double lin_unit_scale = 5;
  bool has_lin_unit_scale() const;
  void clear_lin_unit_scale();
  static const int kLinUnitScaleFieldNumber = 5;
  double lin_unit_scale() const;
  void set_lin_unit_scale(double value);

  // optional double feed_override = 6;
  bool has_feed_override() const;
  void clear_feed_override();
  static const int kFeedOverrideFieldNumber = 6;
  double feed_override() const;
  void set_feed_override(double value);

  // optional bool control_on = 7;
  bool has_control_on() const;
  void clear_control_on();
  static const int kControlOnFieldNumber = 7;
  bool control_on() const;
  void set_control_on(bool value);

  // optional bool machine_connected = 8;
  bool has_machine_connected() const;
  void clear_machine_connected();
  static const int kMachineConnectedFieldNumber = 8;
  bool machine_connected() const;
  void set_machine_connected(bool value);

  // optional bool paused = 9;
  bool has_paused() const;
  void clear_paused();
  static const int kPausedFieldNumber = 9;
  bool paused() const;
  void set_paused(bool value);

  // optional bool optional_stop = 10;
  bool has_optional_stop() const;
  void clear_optional_stop();
  static const int kOptionalStopFieldNumber = 10;
  bool optional_stop() const;
  void set_optional_stop(bool value);

  // optional bool block_delete = 11;
  bool has_block_delete() const;
  void clear_block_delete();
  static const int kBlockDeleteFieldNumber = 11;
  bool block_delete() const;
  void set_block_delete(bool value);

  // optional bool running = 12;
  bool has_running() const;
  void clear_running();
  static const int kRunningFieldNumber = 12;
  bool running() const;
  void set_running(bool value);

  // optional int32 current_line = 13;
  bool has_current_line() const;
  void clear_current_line();
  static const int kCurrentLineFieldNumber = 13;
  ::google::protobuf::int32 current_line() const;
  void set_current_line(::google::protobuf::int32 value);

  // optional bool single_step = 14;
  bool has_single_step() const;
  void clear_single_step();
  static const int kSingleStepFieldNumber = 14;
  bool single_step() const;
  void set_single_step(bool value);

  // optional double spindle_speed = 15;
  bool has_spindle_speed() const;
  void clear_spindle_speed();
  static const int kSpindleSpeedFieldNumber = 15;
  double spindle_speed() const;
  void set_spindle_speed(double value);

  // optional uint32 spindle_state = 16;
  bool has_spindle_state() const;
  void clear_spindle_state();
  static const int kSpindleStateFieldNumber = 16;
  ::google::protobuf::uint32 spindle_state() const;
  void set_spindle_state(::google::protobuf::uint32 value);

  // optional bool mist = 17;
  bool has_mist() const;
  void clear_mist();
  static const int kMistFieldNumber = 17;
  bool mist() const;
  void set_mist(bool value);

  // optional bool flood = 18;
  bool has_flood() const;
  void clear_flood();
  static const int kFloodFieldNumber = 18;
  bool flood() const;
  void set_flood(bool value);

  // @@protoc_insertion_point(class_scope:CncRemote.StateBuf)
 private:
  inline void set_has_abs_pos();
  inline void clear_has_abs_pos();
  inline void set_has_offset_work();
  inline void clear_has_offset_work();
  inline void set_has_offset_fixture();
  inline void clear_has_offset_fixture();
  inline void set_has_lin_unit_scale();
  inline void clear_has_lin_unit_scale();
  inline void set_has_feed_override();
  inline void clear_has_feed_override();
  inline void set_has_control_on();
  inline void clear_has_control_on();
  inline void set_has_machine_connected();
  inline void clear_has_machine_connected();
  inline void set_has_paused();
  inline void clear_has_paused();
  inline void set_has_optional_stop();
  inline void clear_has_optional_stop();
  inline void set_has_block_delete();
  inline void clear_has_block_delete();
  inline void set_has_running();
  inline void clear_has_running();
  inline void set_has_current_line();
  inline void clear_has_current_line();
  inline void set_has_single_step();
  inline void clear_has_single_step();
  inline void set_has_spindle_speed();
  inline void clear_has_spindle_speed();
  inline void set_has_spindle_state();
  inline void clear_has_spindle_state();
  inline void set_has_mist();
  inline void clear_has_mist();
  inline void set_has_flood();
  inline void clear_has_flood();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CncRemote::Axes* abs_pos_;
  ::CncRemote::Axes* offset_work_;
  ::CncRemote::Axes* offset_fixture_;
  double lin_unit_scale_;
  double feed_override_;
  bool control_on_;
  bool machine_connected_;
  bool paused_;
  bool optional_stop_;
  ::google::protobuf::int32 current_line_;
  bool block_delete_;
  bool running_;
  bool single_step_;
  bool mist_;
  ::google::protobuf::uint32 spindle_state_;
  double spindle_speed_;
  bool flood_;
  friend void  protobuf_InitDefaults_cncstatebuf_2eproto_impl();
  friend void  protobuf_AddDesc_cncstatebuf_2eproto_impl();
  friend void protobuf_AssignDesc_cncstatebuf_2eproto();
  friend void protobuf_ShutdownFile_cncstatebuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<StateBuf> StateBuf_default_instance_;

// -------------------------------------------------------------------

class CmdBuf : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CncRemote.CmdBuf) */ {
 public:
  CmdBuf();
  virtual ~CmdBuf();

  CmdBuf(const CmdBuf& from);

  inline CmdBuf& operator=(const CmdBuf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const CmdBuf& default_instance();

  static const CmdBuf* internal_default_instance();

  void Swap(CmdBuf* other);

  // implements Message ----------------------------------------------

  inline CmdBuf* New() const { return New(NULL); }

  CmdBuf* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CmdBuf& from);
  void MergeFrom(const CmdBuf& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CmdBuf* other);
  void UnsafeMergeFrom(const CmdBuf& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string string = 2;
  bool has_string() const;
  void clear_string();
  static const int kStringFieldNumber = 2;
  const ::std::string& string() const;
  void set_string(const ::std::string& value);
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  ::std::string* mutable_string();
  ::std::string* release_string();
  void set_allocated_string(::std::string* string);

  // optional bool state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  bool state() const;
  void set_state(bool value);

  // optional .CncRemote.Axes axes = 4;
  bool has_axes() const;
  void clear_axes();
  static const int kAxesFieldNumber = 4;
  const ::CncRemote::Axes& axes() const;
  ::CncRemote::Axes* mutable_axes();
  ::CncRemote::Axes* release_axes();
  void set_allocated_axes(::CncRemote::Axes* axes);

  // optional .CncRemote.BoolAxes bool_axes = 5;
  bool has_bool_axes() const;
  void clear_bool_axes();
  static const int kBoolAxesFieldNumber = 5;
  const ::CncRemote::BoolAxes& bool_axes() const;
  ::CncRemote::BoolAxes* mutable_bool_axes();
  ::CncRemote::BoolAxes* release_bool_axes();
  void set_allocated_bool_axes(::CncRemote::BoolAxes* bool_axes);

  // optional double rate = 6;
  bool has_rate() const;
  void clear_rate();
  static const int kRateFieldNumber = 6;
  double rate() const;
  void set_rate(double value);

  // @@protoc_insertion_point(class_scope:CncRemote.CmdBuf)
 private:
  inline void set_has_string();
  inline void clear_has_string();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_axes();
  inline void clear_has_axes();
  inline void set_has_bool_axes();
  inline void clear_has_bool_axes();
  inline void set_has_rate();
  inline void clear_has_rate();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr string_;
  ::CncRemote::Axes* axes_;
  ::CncRemote::BoolAxes* bool_axes_;
  double rate_;
  bool state_;
  friend void  protobuf_InitDefaults_cncstatebuf_2eproto_impl();
  friend void  protobuf_AddDesc_cncstatebuf_2eproto_impl();
  friend void protobuf_AssignDesc_cncstatebuf_2eproto();
  friend void protobuf_ShutdownFile_cncstatebuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CmdBuf> CmdBuf_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Axes

// optional double x = 1;
inline bool Axes::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Axes::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Axes::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Axes::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Axes::x() const {
  // @@protoc_insertion_point(field_get:CncRemote.Axes.x)
  return x_;
}
inline void Axes::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.Axes.x)
}

// optional double y = 2;
inline bool Axes::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Axes::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Axes::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Axes::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Axes::y() const {
  // @@protoc_insertion_point(field_get:CncRemote.Axes.y)
  return y_;
}
inline void Axes::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.Axes.y)
}

// optional double z = 3;
inline bool Axes::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Axes::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Axes::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Axes::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Axes::z() const {
  // @@protoc_insertion_point(field_get:CncRemote.Axes.z)
  return z_;
}
inline void Axes::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.Axes.z)
}

// optional double a = 4;
inline bool Axes::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Axes::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Axes::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Axes::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline double Axes::a() const {
  // @@protoc_insertion_point(field_get:CncRemote.Axes.a)
  return a_;
}
inline void Axes::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.Axes.a)
}

// optional double b = 5;
inline bool Axes::has_b() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Axes::set_has_b() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Axes::clear_has_b() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Axes::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline double Axes::b() const {
  // @@protoc_insertion_point(field_get:CncRemote.Axes.b)
  return b_;
}
inline void Axes::set_b(double value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.Axes.b)
}

// optional double c = 6;
inline bool Axes::has_c() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Axes::set_has_c() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Axes::clear_has_c() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Axes::clear_c() {
  c_ = 0;
  clear_has_c();
}
inline double Axes::c() const {
  // @@protoc_insertion_point(field_get:CncRemote.Axes.c)
  return c_;
}
inline void Axes::set_c(double value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.Axes.c)
}

inline const Axes* Axes::internal_default_instance() {
  return &Axes_default_instance_.get();
}
// -------------------------------------------------------------------

// BoolAxes

// optional bool x = 1;
inline bool BoolAxes::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoolAxes::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoolAxes::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoolAxes::clear_x() {
  x_ = false;
  clear_has_x();
}
inline bool BoolAxes::x() const {
  // @@protoc_insertion_point(field_get:CncRemote.BoolAxes.x)
  return x_;
}
inline void BoolAxes::set_x(bool value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.BoolAxes.x)
}

// optional bool y = 2;
inline bool BoolAxes::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoolAxes::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoolAxes::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoolAxes::clear_y() {
  y_ = false;
  clear_has_y();
}
inline bool BoolAxes::y() const {
  // @@protoc_insertion_point(field_get:CncRemote.BoolAxes.y)
  return y_;
}
inline void BoolAxes::set_y(bool value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.BoolAxes.y)
}

// optional bool z = 3;
inline bool BoolAxes::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BoolAxes::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BoolAxes::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BoolAxes::clear_z() {
  z_ = false;
  clear_has_z();
}
inline bool BoolAxes::z() const {
  // @@protoc_insertion_point(field_get:CncRemote.BoolAxes.z)
  return z_;
}
inline void BoolAxes::set_z(bool value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.BoolAxes.z)
}

// optional bool a = 4;
inline bool BoolAxes::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BoolAxes::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BoolAxes::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BoolAxes::clear_a() {
  a_ = false;
  clear_has_a();
}
inline bool BoolAxes::a() const {
  // @@protoc_insertion_point(field_get:CncRemote.BoolAxes.a)
  return a_;
}
inline void BoolAxes::set_a(bool value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.BoolAxes.a)
}

// optional bool b = 5;
inline bool BoolAxes::has_b() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BoolAxes::set_has_b() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BoolAxes::clear_has_b() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BoolAxes::clear_b() {
  b_ = false;
  clear_has_b();
}
inline bool BoolAxes::b() const {
  // @@protoc_insertion_point(field_get:CncRemote.BoolAxes.b)
  return b_;
}
inline void BoolAxes::set_b(bool value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.BoolAxes.b)
}

// optional bool c = 6;
inline bool BoolAxes::has_c() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BoolAxes::set_has_c() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BoolAxes::clear_has_c() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BoolAxes::clear_c() {
  c_ = false;
  clear_has_c();
}
inline bool BoolAxes::c() const {
  // @@protoc_insertion_point(field_get:CncRemote.BoolAxes.c)
  return c_;
}
inline void BoolAxes::set_c(bool value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.BoolAxes.c)
}

inline const BoolAxes* BoolAxes::internal_default_instance() {
  return &BoolAxes_default_instance_.get();
}
// -------------------------------------------------------------------

// StateBuf

// optional .CncRemote.Axes abs_pos = 2;
inline bool StateBuf::has_abs_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateBuf::set_has_abs_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateBuf::clear_has_abs_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateBuf::clear_abs_pos() {
  if (abs_pos_ != NULL) abs_pos_->::CncRemote::Axes::Clear();
  clear_has_abs_pos();
}
inline const ::CncRemote::Axes& StateBuf::abs_pos() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.abs_pos)
  return abs_pos_ != NULL ? *abs_pos_
                         : *::CncRemote::Axes::internal_default_instance();
}
inline ::CncRemote::Axes* StateBuf::mutable_abs_pos() {
  set_has_abs_pos();
  if (abs_pos_ == NULL) {
    abs_pos_ = new ::CncRemote::Axes;
  }
  // @@protoc_insertion_point(field_mutable:CncRemote.StateBuf.abs_pos)
  return abs_pos_;
}
inline ::CncRemote::Axes* StateBuf::release_abs_pos() {
  // @@protoc_insertion_point(field_release:CncRemote.StateBuf.abs_pos)
  clear_has_abs_pos();
  ::CncRemote::Axes* temp = abs_pos_;
  abs_pos_ = NULL;
  return temp;
}
inline void StateBuf::set_allocated_abs_pos(::CncRemote::Axes* abs_pos) {
  delete abs_pos_;
  abs_pos_ = abs_pos;
  if (abs_pos) {
    set_has_abs_pos();
  } else {
    clear_has_abs_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:CncRemote.StateBuf.abs_pos)
}

// optional .CncRemote.Axes offset_work = 3;
inline bool StateBuf::has_offset_work() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StateBuf::set_has_offset_work() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StateBuf::clear_has_offset_work() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StateBuf::clear_offset_work() {
  if (offset_work_ != NULL) offset_work_->::CncRemote::Axes::Clear();
  clear_has_offset_work();
}
inline const ::CncRemote::Axes& StateBuf::offset_work() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.offset_work)
  return offset_work_ != NULL ? *offset_work_
                         : *::CncRemote::Axes::internal_default_instance();
}
inline ::CncRemote::Axes* StateBuf::mutable_offset_work() {
  set_has_offset_work();
  if (offset_work_ == NULL) {
    offset_work_ = new ::CncRemote::Axes;
  }
  // @@protoc_insertion_point(field_mutable:CncRemote.StateBuf.offset_work)
  return offset_work_;
}
inline ::CncRemote::Axes* StateBuf::release_offset_work() {
  // @@protoc_insertion_point(field_release:CncRemote.StateBuf.offset_work)
  clear_has_offset_work();
  ::CncRemote::Axes* temp = offset_work_;
  offset_work_ = NULL;
  return temp;
}
inline void StateBuf::set_allocated_offset_work(::CncRemote::Axes* offset_work) {
  delete offset_work_;
  offset_work_ = offset_work;
  if (offset_work) {
    set_has_offset_work();
  } else {
    clear_has_offset_work();
  }
  // @@protoc_insertion_point(field_set_allocated:CncRemote.StateBuf.offset_work)
}

// optional .CncRemote.Axes offset_fixture = 4;
inline bool StateBuf::has_offset_fixture() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StateBuf::set_has_offset_fixture() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StateBuf::clear_has_offset_fixture() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StateBuf::clear_offset_fixture() {
  if (offset_fixture_ != NULL) offset_fixture_->::CncRemote::Axes::Clear();
  clear_has_offset_fixture();
}
inline const ::CncRemote::Axes& StateBuf::offset_fixture() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.offset_fixture)
  return offset_fixture_ != NULL ? *offset_fixture_
                         : *::CncRemote::Axes::internal_default_instance();
}
inline ::CncRemote::Axes* StateBuf::mutable_offset_fixture() {
  set_has_offset_fixture();
  if (offset_fixture_ == NULL) {
    offset_fixture_ = new ::CncRemote::Axes;
  }
  // @@protoc_insertion_point(field_mutable:CncRemote.StateBuf.offset_fixture)
  return offset_fixture_;
}
inline ::CncRemote::Axes* StateBuf::release_offset_fixture() {
  // @@protoc_insertion_point(field_release:CncRemote.StateBuf.offset_fixture)
  clear_has_offset_fixture();
  ::CncRemote::Axes* temp = offset_fixture_;
  offset_fixture_ = NULL;
  return temp;
}
inline void StateBuf::set_allocated_offset_fixture(::CncRemote::Axes* offset_fixture) {
  delete offset_fixture_;
  offset_fixture_ = offset_fixture;
  if (offset_fixture) {
    set_has_offset_fixture();
  } else {
    clear_has_offset_fixture();
  }
  // @@protoc_insertion_point(field_set_allocated:CncRemote.StateBuf.offset_fixture)
}

// optional double lin_unit_scale = 5;
inline bool StateBuf::has_lin_unit_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StateBuf::set_has_lin_unit_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StateBuf::clear_has_lin_unit_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StateBuf::clear_lin_unit_scale() {
  lin_unit_scale_ = 0;
  clear_has_lin_unit_scale();
}
inline double StateBuf::lin_unit_scale() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.lin_unit_scale)
  return lin_unit_scale_;
}
inline void StateBuf::set_lin_unit_scale(double value) {
  set_has_lin_unit_scale();
  lin_unit_scale_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.StateBuf.lin_unit_scale)
}

// optional double feed_override = 6;
inline bool StateBuf::has_feed_override() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StateBuf::set_has_feed_override() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StateBuf::clear_has_feed_override() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StateBuf::clear_feed_override() {
  feed_override_ = 0;
  clear_has_feed_override();
}
inline double StateBuf::feed_override() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.feed_override)
  return feed_override_;
}
inline void StateBuf::set_feed_override(double value) {
  set_has_feed_override();
  feed_override_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.StateBuf.feed_override)
}

// optional bool control_on = 7;
inline bool StateBuf::has_control_on() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StateBuf::set_has_control_on() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StateBuf::clear_has_control_on() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StateBuf::clear_control_on() {
  control_on_ = false;
  clear_has_control_on();
}
inline bool StateBuf::control_on() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.control_on)
  return control_on_;
}
inline void StateBuf::set_control_on(bool value) {
  set_has_control_on();
  control_on_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.StateBuf.control_on)
}

// optional bool machine_connected = 8;
inline bool StateBuf::has_machine_connected() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StateBuf::set_has_machine_connected() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StateBuf::clear_has_machine_connected() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StateBuf::clear_machine_connected() {
  machine_connected_ = false;
  clear_has_machine_connected();
}
inline bool StateBuf::machine_connected() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.machine_connected)
  return machine_connected_;
}
inline void StateBuf::set_machine_connected(bool value) {
  set_has_machine_connected();
  machine_connected_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.StateBuf.machine_connected)
}

// optional bool paused = 9;
inline bool StateBuf::has_paused() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StateBuf::set_has_paused() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StateBuf::clear_has_paused() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StateBuf::clear_paused() {
  paused_ = false;
  clear_has_paused();
}
inline bool StateBuf::paused() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.paused)
  return paused_;
}
inline void StateBuf::set_paused(bool value) {
  set_has_paused();
  paused_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.StateBuf.paused)
}

// optional bool optional_stop = 10;
inline bool StateBuf::has_optional_stop() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StateBuf::set_has_optional_stop() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StateBuf::clear_has_optional_stop() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StateBuf::clear_optional_stop() {
  optional_stop_ = false;
  clear_has_optional_stop();
}
inline bool StateBuf::optional_stop() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.optional_stop)
  return optional_stop_;
}
inline void StateBuf::set_optional_stop(bool value) {
  set_has_optional_stop();
  optional_stop_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.StateBuf.optional_stop)
}

// optional bool block_delete = 11;
inline bool StateBuf::has_block_delete() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StateBuf::set_has_block_delete() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StateBuf::clear_has_block_delete() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StateBuf::clear_block_delete() {
  block_delete_ = false;
  clear_has_block_delete();
}
inline bool StateBuf::block_delete() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.block_delete)
  return block_delete_;
}
inline void StateBuf::set_block_delete(bool value) {
  set_has_block_delete();
  block_delete_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.StateBuf.block_delete)
}

// optional bool running = 12;
inline bool StateBuf::has_running() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StateBuf::set_has_running() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StateBuf::clear_has_running() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StateBuf::clear_running() {
  running_ = false;
  clear_has_running();
}
inline bool StateBuf::running() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.running)
  return running_;
}
inline void StateBuf::set_running(bool value) {
  set_has_running();
  running_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.StateBuf.running)
}

// optional int32 current_line = 13;
inline bool StateBuf::has_current_line() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StateBuf::set_has_current_line() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StateBuf::clear_has_current_line() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StateBuf::clear_current_line() {
  current_line_ = 0;
  clear_has_current_line();
}
inline ::google::protobuf::int32 StateBuf::current_line() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.current_line)
  return current_line_;
}
inline void StateBuf::set_current_line(::google::protobuf::int32 value) {
  set_has_current_line();
  current_line_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.StateBuf.current_line)
}

// optional bool single_step = 14;
inline bool StateBuf::has_single_step() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StateBuf::set_has_single_step() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StateBuf::clear_has_single_step() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StateBuf::clear_single_step() {
  single_step_ = false;
  clear_has_single_step();
}
inline bool StateBuf::single_step() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.single_step)
  return single_step_;
}
inline void StateBuf::set_single_step(bool value) {
  set_has_single_step();
  single_step_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.StateBuf.single_step)
}

// optional double spindle_speed = 15;
inline bool StateBuf::has_spindle_speed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StateBuf::set_has_spindle_speed() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StateBuf::clear_has_spindle_speed() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StateBuf::clear_spindle_speed() {
  spindle_speed_ = 0;
  clear_has_spindle_speed();
}
inline double StateBuf::spindle_speed() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.spindle_speed)
  return spindle_speed_;
}
inline void StateBuf::set_spindle_speed(double value) {
  set_has_spindle_speed();
  spindle_speed_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.StateBuf.spindle_speed)
}

// optional uint32 spindle_state = 16;
inline bool StateBuf::has_spindle_state() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StateBuf::set_has_spindle_state() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StateBuf::clear_has_spindle_state() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StateBuf::clear_spindle_state() {
  spindle_state_ = 0u;
  clear_has_spindle_state();
}
inline ::google::protobuf::uint32 StateBuf::spindle_state() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.spindle_state)
  return spindle_state_;
}
inline void StateBuf::set_spindle_state(::google::protobuf::uint32 value) {
  set_has_spindle_state();
  spindle_state_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.StateBuf.spindle_state)
}

// optional bool mist = 17;
inline bool StateBuf::has_mist() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StateBuf::set_has_mist() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StateBuf::clear_has_mist() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StateBuf::clear_mist() {
  mist_ = false;
  clear_has_mist();
}
inline bool StateBuf::mist() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.mist)
  return mist_;
}
inline void StateBuf::set_mist(bool value) {
  set_has_mist();
  mist_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.StateBuf.mist)
}

// optional bool flood = 18;
inline bool StateBuf::has_flood() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void StateBuf::set_has_flood() {
  _has_bits_[0] |= 0x00010000u;
}
inline void StateBuf::clear_has_flood() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void StateBuf::clear_flood() {
  flood_ = false;
  clear_has_flood();
}
inline bool StateBuf::flood() const {
  // @@protoc_insertion_point(field_get:CncRemote.StateBuf.flood)
  return flood_;
}
inline void StateBuf::set_flood(bool value) {
  set_has_flood();
  flood_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.StateBuf.flood)
}

inline const StateBuf* StateBuf::internal_default_instance() {
  return &StateBuf_default_instance_.get();
}
// -------------------------------------------------------------------

// CmdBuf

// optional string string = 2;
inline bool CmdBuf::has_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdBuf::set_has_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdBuf::clear_has_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdBuf::clear_string() {
  string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string();
}
inline const ::std::string& CmdBuf::string() const {
  // @@protoc_insertion_point(field_get:CncRemote.CmdBuf.string)
  return string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdBuf::set_string(const ::std::string& value) {
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CncRemote.CmdBuf.string)
}
inline void CmdBuf::set_string(const char* value) {
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CncRemote.CmdBuf.string)
}
inline void CmdBuf::set_string(const char* value, size_t size) {
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CncRemote.CmdBuf.string)
}
inline ::std::string* CmdBuf::mutable_string() {
  set_has_string();
  // @@protoc_insertion_point(field_mutable:CncRemote.CmdBuf.string)
  return string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdBuf::release_string() {
  // @@protoc_insertion_point(field_release:CncRemote.CmdBuf.string)
  clear_has_string();
  return string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdBuf::set_allocated_string(::std::string* string) {
  if (string != NULL) {
    set_has_string();
  } else {
    clear_has_string();
  }
  string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string);
  // @@protoc_insertion_point(field_set_allocated:CncRemote.CmdBuf.string)
}

// optional bool state = 3;
inline bool CmdBuf::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdBuf::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdBuf::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdBuf::clear_state() {
  state_ = false;
  clear_has_state();
}
inline bool CmdBuf::state() const {
  // @@protoc_insertion_point(field_get:CncRemote.CmdBuf.state)
  return state_;
}
inline void CmdBuf::set_state(bool value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.CmdBuf.state)
}

// optional .CncRemote.Axes axes = 4;
inline bool CmdBuf::has_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdBuf::set_has_axes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdBuf::clear_has_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdBuf::clear_axes() {
  if (axes_ != NULL) axes_->::CncRemote::Axes::Clear();
  clear_has_axes();
}
inline const ::CncRemote::Axes& CmdBuf::axes() const {
  // @@protoc_insertion_point(field_get:CncRemote.CmdBuf.axes)
  return axes_ != NULL ? *axes_
                         : *::CncRemote::Axes::internal_default_instance();
}
inline ::CncRemote::Axes* CmdBuf::mutable_axes() {
  set_has_axes();
  if (axes_ == NULL) {
    axes_ = new ::CncRemote::Axes;
  }
  // @@protoc_insertion_point(field_mutable:CncRemote.CmdBuf.axes)
  return axes_;
}
inline ::CncRemote::Axes* CmdBuf::release_axes() {
  // @@protoc_insertion_point(field_release:CncRemote.CmdBuf.axes)
  clear_has_axes();
  ::CncRemote::Axes* temp = axes_;
  axes_ = NULL;
  return temp;
}
inline void CmdBuf::set_allocated_axes(::CncRemote::Axes* axes) {
  delete axes_;
  axes_ = axes;
  if (axes) {
    set_has_axes();
  } else {
    clear_has_axes();
  }
  // @@protoc_insertion_point(field_set_allocated:CncRemote.CmdBuf.axes)
}

// optional .CncRemote.BoolAxes bool_axes = 5;
inline bool CmdBuf::has_bool_axes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdBuf::set_has_bool_axes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdBuf::clear_has_bool_axes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdBuf::clear_bool_axes() {
  if (bool_axes_ != NULL) bool_axes_->::CncRemote::BoolAxes::Clear();
  clear_has_bool_axes();
}
inline const ::CncRemote::BoolAxes& CmdBuf::bool_axes() const {
  // @@protoc_insertion_point(field_get:CncRemote.CmdBuf.bool_axes)
  return bool_axes_ != NULL ? *bool_axes_
                         : *::CncRemote::BoolAxes::internal_default_instance();
}
inline ::CncRemote::BoolAxes* CmdBuf::mutable_bool_axes() {
  set_has_bool_axes();
  if (bool_axes_ == NULL) {
    bool_axes_ = new ::CncRemote::BoolAxes;
  }
  // @@protoc_insertion_point(field_mutable:CncRemote.CmdBuf.bool_axes)
  return bool_axes_;
}
inline ::CncRemote::BoolAxes* CmdBuf::release_bool_axes() {
  // @@protoc_insertion_point(field_release:CncRemote.CmdBuf.bool_axes)
  clear_has_bool_axes();
  ::CncRemote::BoolAxes* temp = bool_axes_;
  bool_axes_ = NULL;
  return temp;
}
inline void CmdBuf::set_allocated_bool_axes(::CncRemote::BoolAxes* bool_axes) {
  delete bool_axes_;
  bool_axes_ = bool_axes;
  if (bool_axes) {
    set_has_bool_axes();
  } else {
    clear_has_bool_axes();
  }
  // @@protoc_insertion_point(field_set_allocated:CncRemote.CmdBuf.bool_axes)
}

// optional double rate = 6;
inline bool CmdBuf::has_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdBuf::set_has_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdBuf::clear_has_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdBuf::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline double CmdBuf::rate() const {
  // @@protoc_insertion_point(field_get:CncRemote.CmdBuf.rate)
  return rate_;
}
inline void CmdBuf::set_rate(double value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:CncRemote.CmdBuf.rate)
}

inline const CmdBuf* CmdBuf::internal_default_instance() {
  return &CmdBuf_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CncRemote

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CncRemote::SPINDLE> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cncstatebuf_2eproto__INCLUDED
