// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cncstatebuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_cncstatebuf_2eproto() {
  delete CncAxes::default_instance_;
  delete CncStateBuf::default_instance_;
  delete CncCmdBuf::default_instance_;
}

void protobuf_AddDesc_cncstatebuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  CncAxes::default_instance_ = new CncAxes();
  CncStateBuf::default_instance_ = new CncStateBuf();
  CncCmdBuf::default_instance_ = new CncCmdBuf();
  CncAxes::default_instance_->InitAsDefaultInstance();
  CncStateBuf::default_instance_->InitAsDefaultInstance();
  CncCmdBuf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cncstatebuf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cncstatebuf_2eproto {
  StaticDescriptorInitializer_cncstatebuf_2eproto() {
    protobuf_AddDesc_cncstatebuf_2eproto();
  }
} static_descriptor_initializer_cncstatebuf_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CncAxes::kXFieldNumber;
const int CncAxes::kYFieldNumber;
const int CncAxes::kZFieldNumber;
const int CncAxes::kAFieldNumber;
const int CncAxes::kBFieldNumber;
const int CncAxes::kCFieldNumber;
#endif  // !_MSC_VER

CncAxes::CncAxes()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CncAxes::InitAsDefaultInstance() {
}

CncAxes::CncAxes(const CncAxes& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CncAxes::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  a_ = 0;
  b_ = 0;
  c_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CncAxes::~CncAxes() {
  SharedDtor();
}

void CncAxes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CncAxes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CncAxes& CncAxes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cncstatebuf_2eproto();  return *default_instance_;
}

CncAxes* CncAxes::default_instance_ = NULL;

CncAxes* CncAxes::New() const {
  return new CncAxes;
}

void CncAxes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    a_ = 0;
    b_ = 0;
    c_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CncAxes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // optional double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }
      
      // optional double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_a;
        break;
      }
      
      // optional double a = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_b;
        break;
      }
      
      // optional double b = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_c;
        break;
      }
      
      // optional double c = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CncAxes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }
  
  // optional double a = 4;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a(), output);
  }
  
  // optional double b = 5;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->b(), output);
  }
  
  // optional double c = 6;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->c(), output);
  }
  
}

int CncAxes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }
    
    // optional double a = 4;
    if (has_a()) {
      total_size += 1 + 8;
    }
    
    // optional double b = 5;
    if (has_b()) {
      total_size += 1 + 8;
    }
    
    // optional double c = 6;
    if (has_c()) {
      total_size += 1 + 8;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CncAxes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CncAxes*>(&from));
}

void CncAxes::MergeFrom(const CncAxes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
  }
}

void CncAxes::CopyFrom(const CncAxes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CncAxes::IsInitialized() const {
  
  return true;
}

void CncAxes::Swap(CncAxes* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(c_, other->c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CncAxes::GetTypeName() const {
  return "CncAxes";
}


// ===================================================================

#ifndef _MSC_VER
const int CncStateBuf::kAbsPosFieldNumber;
const int CncStateBuf::kOffsetWorkFieldNumber;
const int CncStateBuf::kOffsetFixtureFieldNumber;
const int CncStateBuf::kLinUnitScaleFieldNumber;
const int CncStateBuf::kControlOnFieldNumber;
const int CncStateBuf::kMachineConnectedFieldNumber;
const int CncStateBuf::kPausedFieldNumber;
const int CncStateBuf::kOptionalStopFieldNumber;
const int CncStateBuf::kBlockDeleteFieldNumber;
const int CncStateBuf::kRunningFieldNumber;
const int CncStateBuf::kCurrentlineFieldNumber;
#endif  // !_MSC_VER

CncStateBuf::CncStateBuf()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CncStateBuf::InitAsDefaultInstance() {
  abs_pos_ = const_cast< ::CncAxes*>(&::CncAxes::default_instance());
  offset_work_ = const_cast< ::CncAxes*>(&::CncAxes::default_instance());
  offset_fixture_ = const_cast< ::CncAxes*>(&::CncAxes::default_instance());
}

CncStateBuf::CncStateBuf(const CncStateBuf& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CncStateBuf::SharedCtor() {
  _cached_size_ = 0;
  abs_pos_ = NULL;
  offset_work_ = NULL;
  offset_fixture_ = NULL;
  lin_unit_scale_ = 0;
  control_on_ = false;
  machine_connected_ = false;
  paused_ = false;
  optional_stop_ = false;
  block_delete_ = false;
  running_ = false;
  currentline_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CncStateBuf::~CncStateBuf() {
  SharedDtor();
}

void CncStateBuf::SharedDtor() {
  if (this != default_instance_) {
    delete abs_pos_;
    delete offset_work_;
    delete offset_fixture_;
  }
}

void CncStateBuf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CncStateBuf& CncStateBuf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cncstatebuf_2eproto();  return *default_instance_;
}

CncStateBuf* CncStateBuf::default_instance_ = NULL;

CncStateBuf* CncStateBuf::New() const {
  return new CncStateBuf;
}

void CncStateBuf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_abs_pos()) {
      if (abs_pos_ != NULL) abs_pos_->::CncAxes::Clear();
    }
    if (has_offset_work()) {
      if (offset_work_ != NULL) offset_work_->::CncAxes::Clear();
    }
    if (has_offset_fixture()) {
      if (offset_fixture_ != NULL) offset_fixture_->::CncAxes::Clear();
    }
    lin_unit_scale_ = 0;
    control_on_ = false;
    machine_connected_ = false;
    paused_ = false;
    optional_stop_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    block_delete_ = false;
    running_ = false;
    currentline_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CncStateBuf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CncAxes abs_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_abs_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_offset_work;
        break;
      }
      
      // optional .CncAxes offset_work = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offset_work:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset_work()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_offset_fixture;
        break;
      }
      
      // optional .CncAxes offset_fixture = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offset_fixture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset_fixture()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_lin_unit_scale;
        break;
      }
      
      // optional double lin_unit_scale = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lin_unit_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lin_unit_scale_)));
          set_has_lin_unit_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_control_on;
        break;
      }
      
      // optional bool control_on = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_control_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &control_on_)));
          set_has_control_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_machine_connected;
        break;
      }
      
      // optional bool machine_connected = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_machine_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &machine_connected_)));
          set_has_machine_connected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_paused;
        break;
      }
      
      // optional bool paused = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paused_)));
          set_has_paused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_optional_stop;
        break;
      }
      
      // optional bool optional_stop = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optional_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_stop_)));
          set_has_optional_stop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_block_delete;
        break;
      }
      
      // optional bool block_delete = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_delete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &block_delete_)));
          set_has_block_delete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_running;
        break;
      }
      
      // optional bool running = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_running:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &running_)));
          set_has_running();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_currentline;
        break;
      }
      
      // optional int32 currentline = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentline_)));
          set_has_currentline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CncStateBuf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CncAxes abs_pos = 1;
  if (has_abs_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->abs_pos(), output);
  }
  
  // optional .CncAxes offset_work = 2;
  if (has_offset_work()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->offset_work(), output);
  }
  
  // optional .CncAxes offset_fixture = 3;
  if (has_offset_fixture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->offset_fixture(), output);
  }
  
  // optional double lin_unit_scale = 4;
  if (has_lin_unit_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lin_unit_scale(), output);
  }
  
  // optional bool control_on = 7;
  if (has_control_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->control_on(), output);
  }
  
  // optional bool machine_connected = 8;
  if (has_machine_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->machine_connected(), output);
  }
  
  // optional bool paused = 9;
  if (has_paused()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->paused(), output);
  }
  
  // optional bool optional_stop = 10;
  if (has_optional_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->optional_stop(), output);
  }
  
  // optional bool block_delete = 11;
  if (has_block_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->block_delete(), output);
  }
  
  // optional bool running = 12;
  if (has_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->running(), output);
  }
  
  // optional int32 currentline = 13;
  if (has_currentline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->currentline(), output);
  }
  
}

int CncStateBuf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CncAxes abs_pos = 1;
    if (has_abs_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->abs_pos());
    }
    
    // optional .CncAxes offset_work = 2;
    if (has_offset_work()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offset_work());
    }
    
    // optional .CncAxes offset_fixture = 3;
    if (has_offset_fixture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offset_fixture());
    }
    
    // optional double lin_unit_scale = 4;
    if (has_lin_unit_scale()) {
      total_size += 1 + 8;
    }
    
    // optional bool control_on = 7;
    if (has_control_on()) {
      total_size += 1 + 1;
    }
    
    // optional bool machine_connected = 8;
    if (has_machine_connected()) {
      total_size += 1 + 1;
    }
    
    // optional bool paused = 9;
    if (has_paused()) {
      total_size += 1 + 1;
    }
    
    // optional bool optional_stop = 10;
    if (has_optional_stop()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool block_delete = 11;
    if (has_block_delete()) {
      total_size += 1 + 1;
    }
    
    // optional bool running = 12;
    if (has_running()) {
      total_size += 1 + 1;
    }
    
    // optional int32 currentline = 13;
    if (has_currentline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentline());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CncStateBuf::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CncStateBuf*>(&from));
}

void CncStateBuf::MergeFrom(const CncStateBuf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_abs_pos()) {
      mutable_abs_pos()->::CncAxes::MergeFrom(from.abs_pos());
    }
    if (from.has_offset_work()) {
      mutable_offset_work()->::CncAxes::MergeFrom(from.offset_work());
    }
    if (from.has_offset_fixture()) {
      mutable_offset_fixture()->::CncAxes::MergeFrom(from.offset_fixture());
    }
    if (from.has_lin_unit_scale()) {
      set_lin_unit_scale(from.lin_unit_scale());
    }
    if (from.has_control_on()) {
      set_control_on(from.control_on());
    }
    if (from.has_machine_connected()) {
      set_machine_connected(from.machine_connected());
    }
    if (from.has_paused()) {
      set_paused(from.paused());
    }
    if (from.has_optional_stop()) {
      set_optional_stop(from.optional_stop());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_block_delete()) {
      set_block_delete(from.block_delete());
    }
    if (from.has_running()) {
      set_running(from.running());
    }
    if (from.has_currentline()) {
      set_currentline(from.currentline());
    }
  }
}

void CncStateBuf::CopyFrom(const CncStateBuf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CncStateBuf::IsInitialized() const {
  
  return true;
}

void CncStateBuf::Swap(CncStateBuf* other) {
  if (other != this) {
    std::swap(abs_pos_, other->abs_pos_);
    std::swap(offset_work_, other->offset_work_);
    std::swap(offset_fixture_, other->offset_fixture_);
    std::swap(lin_unit_scale_, other->lin_unit_scale_);
    std::swap(control_on_, other->control_on_);
    std::swap(machine_connected_, other->machine_connected_);
    std::swap(paused_, other->paused_);
    std::swap(optional_stop_, other->optional_stop_);
    std::swap(block_delete_, other->block_delete_);
    std::swap(running_, other->running_);
    std::swap(currentline_, other->currentline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CncStateBuf::GetTypeName() const {
  return "CncStateBuf";
}


// ===================================================================

#ifndef _MSC_VER
const int CncCmdBuf::kTypeFieldNumber;
const int CncCmdBuf::kStringFieldNumber;
const int CncCmdBuf::kStateFieldNumber;
const int CncCmdBuf::kBoolxFieldNumber;
const int CncCmdBuf::kBoolyFieldNumber;
const int CncCmdBuf::kBoolzFieldNumber;
const int CncCmdBuf::kBoolaFieldNumber;
const int CncCmdBuf::kBoolbFieldNumber;
const int CncCmdBuf::kBoolcFieldNumber;
const int CncCmdBuf::kRateFieldNumber;
const int CncCmdBuf::kAxesFieldNumber;
#endif  // !_MSC_VER

CncCmdBuf::CncCmdBuf()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CncCmdBuf::InitAsDefaultInstance() {
  axes_ = const_cast< ::CncAxes*>(&::CncAxes::default_instance());
}

CncCmdBuf::CncCmdBuf(const CncCmdBuf& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CncCmdBuf::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = false;
  boolx_ = false;
  booly_ = false;
  boolz_ = false;
  boola_ = false;
  boolb_ = false;
  boolc_ = false;
  rate_ = 0;
  axes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CncCmdBuf::~CncCmdBuf() {
  SharedDtor();
}

void CncCmdBuf::SharedDtor() {
  if (string_ != &::google::protobuf::internal::kEmptyString) {
    delete string_;
  }
  if (this != default_instance_) {
    delete axes_;
  }
}

void CncCmdBuf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CncCmdBuf& CncCmdBuf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cncstatebuf_2eproto();  return *default_instance_;
}

CncCmdBuf* CncCmdBuf::default_instance_ = NULL;

CncCmdBuf* CncCmdBuf::New() const {
  return new CncCmdBuf;
}

void CncCmdBuf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_string()) {
      if (string_ != &::google::protobuf::internal::kEmptyString) {
        string_->clear();
      }
    }
    state_ = false;
    boolx_ = false;
    booly_ = false;
    boolz_ = false;
    boola_ = false;
    boolb_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    boolc_ = false;
    rate_ = 0;
    if (has_axes()) {
      if (axes_ != NULL) axes_->::CncAxes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CncCmdBuf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_string;
        break;
      }
      
      // optional string string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }
      
      // optional bool state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boolx;
        break;
      }
      
      // optional bool boolx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boolx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolx_)));
          set_has_boolx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_booly;
        break;
      }
      
      // optional bool booly = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_booly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &booly_)));
          set_has_booly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_boolz;
        break;
      }
      
      // optional bool boolz = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boolz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolz_)));
          set_has_boolz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_boola;
        break;
      }
      
      // optional bool boola = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boola:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boola_)));
          set_has_boola();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_boolb;
        break;
      }
      
      // optional bool boolb = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boolb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolb_)));
          set_has_boolb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_boolc;
        break;
      }
      
      // optional bool boolc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boolc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolc_)));
          set_has_boolc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_rate;
        break;
      }
      
      // optional double rate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_axes;
        break;
      }
      
      // optional .CncAxes axes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_axes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CncCmdBuf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional string string = 2;
  if (has_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->string(), output);
  }
  
  // optional bool state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->state(), output);
  }
  
  // optional bool boolx = 4;
  if (has_boolx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->boolx(), output);
  }
  
  // optional bool booly = 5;
  if (has_booly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->booly(), output);
  }
  
  // optional bool boolz = 6;
  if (has_boolz()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->boolz(), output);
  }
  
  // optional bool boola = 7;
  if (has_boola()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->boola(), output);
  }
  
  // optional bool boolb = 8;
  if (has_boolb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->boolb(), output);
  }
  
  // optional bool boolc = 9;
  if (has_boolc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->boolc(), output);
  }
  
  // optional double rate = 10;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->rate(), output);
  }
  
  // optional .CncAxes axes = 11;
  if (has_axes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->axes(), output);
  }
  
}

int CncCmdBuf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional string string = 2;
    if (has_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string());
    }
    
    // optional bool state = 3;
    if (has_state()) {
      total_size += 1 + 1;
    }
    
    // optional bool boolx = 4;
    if (has_boolx()) {
      total_size += 1 + 1;
    }
    
    // optional bool booly = 5;
    if (has_booly()) {
      total_size += 1 + 1;
    }
    
    // optional bool boolz = 6;
    if (has_boolz()) {
      total_size += 1 + 1;
    }
    
    // optional bool boola = 7;
    if (has_boola()) {
      total_size += 1 + 1;
    }
    
    // optional bool boolb = 8;
    if (has_boolb()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool boolc = 9;
    if (has_boolc()) {
      total_size += 1 + 1;
    }
    
    // optional double rate = 10;
    if (has_rate()) {
      total_size += 1 + 8;
    }
    
    // optional .CncAxes axes = 11;
    if (has_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->axes());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CncCmdBuf::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CncCmdBuf*>(&from));
}

void CncCmdBuf::MergeFrom(const CncCmdBuf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_string()) {
      set_string(from.string());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_boolx()) {
      set_boolx(from.boolx());
    }
    if (from.has_booly()) {
      set_booly(from.booly());
    }
    if (from.has_boolz()) {
      set_boolz(from.boolz());
    }
    if (from.has_boola()) {
      set_boola(from.boola());
    }
    if (from.has_boolb()) {
      set_boolb(from.boolb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_boolc()) {
      set_boolc(from.boolc());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_axes()) {
      mutable_axes()->::CncAxes::MergeFrom(from.axes());
    }
  }
}

void CncCmdBuf::CopyFrom(const CncCmdBuf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CncCmdBuf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CncCmdBuf::Swap(CncCmdBuf* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(string_, other->string_);
    std::swap(state_, other->state_);
    std::swap(boolx_, other->boolx_);
    std::swap(booly_, other->booly_);
    std::swap(boolz_, other->boolz_);
    std::swap(boola_, other->boola_);
    std::swap(boolb_, other->boolb_);
    std::swap(boolc_, other->boolc_);
    std::swap(rate_, other->rate_);
    std::swap(axes_, other->axes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CncCmdBuf::GetTypeName() const {
  return "CncCmdBuf";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
