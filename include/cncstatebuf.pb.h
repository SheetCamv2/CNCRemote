// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cncstatebuf.proto

#ifndef PROTOBUF_cncstatebuf_2eproto__INCLUDED
#define PROTOBUF_cncstatebuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cncstatebuf_2eproto();
void protobuf_AssignDesc_cncstatebuf_2eproto();
void protobuf_ShutdownFile_cncstatebuf_2eproto();

class CncAxes;
class CncStateBuf;
class CncCmdBuf;

// ===================================================================

class CncAxes : public ::google::protobuf::MessageLite {
 public:
  CncAxes();
  virtual ~CncAxes();
  
  CncAxes(const CncAxes& from);
  
  inline CncAxes& operator=(const CncAxes& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CncAxes& default_instance();
  
  void Swap(CncAxes* other);
  
  // implements Message ----------------------------------------------
  
  CncAxes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CncAxes& from);
  void MergeFrom(const CncAxes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);
  
  // optional double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);
  
  // optional double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);
  
  // optional double a = 4;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 4;
  inline double a() const;
  inline void set_a(double value);
  
  // optional double b = 5;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 5;
  inline double b() const;
  inline void set_b(double value);
  
  // optional double c = 6;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 6;
  inline double c() const;
  inline void set_c(double value);
  
  // @@protoc_insertion_point(class_scope:CncAxes)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_c();
  inline void clear_has_c();
  
  double x_;
  double y_;
  double z_;
  double a_;
  double b_;
  double c_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_cncstatebuf_2eproto();
  friend void protobuf_AssignDesc_cncstatebuf_2eproto();
  friend void protobuf_ShutdownFile_cncstatebuf_2eproto();
  
  void InitAsDefaultInstance();
  static CncAxes* default_instance_;
};
// -------------------------------------------------------------------

class CncStateBuf : public ::google::protobuf::MessageLite {
 public:
  CncStateBuf();
  virtual ~CncStateBuf();
  
  CncStateBuf(const CncStateBuf& from);
  
  inline CncStateBuf& operator=(const CncStateBuf& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CncStateBuf& default_instance();
  
  void Swap(CncStateBuf* other);
  
  // implements Message ----------------------------------------------
  
  CncStateBuf* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CncStateBuf& from);
  void MergeFrom(const CncStateBuf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CncAxes abs_pos = 1;
  inline bool has_abs_pos() const;
  inline void clear_abs_pos();
  static const int kAbsPosFieldNumber = 1;
  inline const ::CncAxes& abs_pos() const;
  inline ::CncAxes* mutable_abs_pos();
  inline ::CncAxes* release_abs_pos();
  
  // optional .CncAxes offset_work = 2;
  inline bool has_offset_work() const;
  inline void clear_offset_work();
  static const int kOffsetWorkFieldNumber = 2;
  inline const ::CncAxes& offset_work() const;
  inline ::CncAxes* mutable_offset_work();
  inline ::CncAxes* release_offset_work();
  
  // optional .CncAxes offset_fixture = 3;
  inline bool has_offset_fixture() const;
  inline void clear_offset_fixture();
  static const int kOffsetFixtureFieldNumber = 3;
  inline const ::CncAxes& offset_fixture() const;
  inline ::CncAxes* mutable_offset_fixture();
  inline ::CncAxes* release_offset_fixture();
  
  // optional double lin_unit_scale = 4;
  inline bool has_lin_unit_scale() const;
  inline void clear_lin_unit_scale();
  static const int kLinUnitScaleFieldNumber = 4;
  inline double lin_unit_scale() const;
  inline void set_lin_unit_scale(double value);
  
  // optional bool control_on = 7;
  inline bool has_control_on() const;
  inline void clear_control_on();
  static const int kControlOnFieldNumber = 7;
  inline bool control_on() const;
  inline void set_control_on(bool value);
  
  // optional bool machine_connected = 8;
  inline bool has_machine_connected() const;
  inline void clear_machine_connected();
  static const int kMachineConnectedFieldNumber = 8;
  inline bool machine_connected() const;
  inline void set_machine_connected(bool value);
  
  // optional bool paused = 9;
  inline bool has_paused() const;
  inline void clear_paused();
  static const int kPausedFieldNumber = 9;
  inline bool paused() const;
  inline void set_paused(bool value);
  
  // optional bool optional_stop = 10;
  inline bool has_optional_stop() const;
  inline void clear_optional_stop();
  static const int kOptionalStopFieldNumber = 10;
  inline bool optional_stop() const;
  inline void set_optional_stop(bool value);
  
  // optional bool block_delete = 11;
  inline bool has_block_delete() const;
  inline void clear_block_delete();
  static const int kBlockDeleteFieldNumber = 11;
  inline bool block_delete() const;
  inline void set_block_delete(bool value);
  
  // optional bool running = 12;
  inline bool has_running() const;
  inline void clear_running();
  static const int kRunningFieldNumber = 12;
  inline bool running() const;
  inline void set_running(bool value);
  
  // optional int32 currentline = 13;
  inline bool has_currentline() const;
  inline void clear_currentline();
  static const int kCurrentlineFieldNumber = 13;
  inline ::google::protobuf::int32 currentline() const;
  inline void set_currentline(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CncStateBuf)
 private:
  inline void set_has_abs_pos();
  inline void clear_has_abs_pos();
  inline void set_has_offset_work();
  inline void clear_has_offset_work();
  inline void set_has_offset_fixture();
  inline void clear_has_offset_fixture();
  inline void set_has_lin_unit_scale();
  inline void clear_has_lin_unit_scale();
  inline void set_has_control_on();
  inline void clear_has_control_on();
  inline void set_has_machine_connected();
  inline void clear_has_machine_connected();
  inline void set_has_paused();
  inline void clear_has_paused();
  inline void set_has_optional_stop();
  inline void clear_has_optional_stop();
  inline void set_has_block_delete();
  inline void clear_has_block_delete();
  inline void set_has_running();
  inline void clear_has_running();
  inline void set_has_currentline();
  inline void clear_has_currentline();
  
  ::CncAxes* abs_pos_;
  ::CncAxes* offset_work_;
  ::CncAxes* offset_fixture_;
  double lin_unit_scale_;
  bool control_on_;
  bool machine_connected_;
  bool paused_;
  bool optional_stop_;
  bool block_delete_;
  bool running_;
  ::google::protobuf::int32 currentline_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_cncstatebuf_2eproto();
  friend void protobuf_AssignDesc_cncstatebuf_2eproto();
  friend void protobuf_ShutdownFile_cncstatebuf_2eproto();
  
  void InitAsDefaultInstance();
  static CncStateBuf* default_instance_;
};
// -------------------------------------------------------------------

class CncCmdBuf : public ::google::protobuf::MessageLite {
 public:
  CncCmdBuf();
  virtual ~CncCmdBuf();
  
  CncCmdBuf(const CncCmdBuf& from);
  
  inline CncCmdBuf& operator=(const CncCmdBuf& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const CncCmdBuf& default_instance();
  
  void Swap(CncCmdBuf* other);
  
  // implements Message ----------------------------------------------
  
  CncCmdBuf* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CncCmdBuf& from);
  void MergeFrom(const CncCmdBuf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional string string = 2;
  inline bool has_string() const;
  inline void clear_string();
  static const int kStringFieldNumber = 2;
  inline const ::std::string& string() const;
  inline void set_string(const ::std::string& value);
  inline void set_string(const char* value);
  inline void set_string(const char* value, size_t size);
  inline ::std::string* mutable_string();
  inline ::std::string* release_string();
  
  // optional bool state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline bool state() const;
  inline void set_state(bool value);
  
  // optional bool boolx = 4;
  inline bool has_boolx() const;
  inline void clear_boolx();
  static const int kBoolxFieldNumber = 4;
  inline bool boolx() const;
  inline void set_boolx(bool value);
  
  // optional bool booly = 5;
  inline bool has_booly() const;
  inline void clear_booly();
  static const int kBoolyFieldNumber = 5;
  inline bool booly() const;
  inline void set_booly(bool value);
  
  // optional bool boolz = 6;
  inline bool has_boolz() const;
  inline void clear_boolz();
  static const int kBoolzFieldNumber = 6;
  inline bool boolz() const;
  inline void set_boolz(bool value);
  
  // optional bool boola = 7;
  inline bool has_boola() const;
  inline void clear_boola();
  static const int kBoolaFieldNumber = 7;
  inline bool boola() const;
  inline void set_boola(bool value);
  
  // optional bool boolb = 8;
  inline bool has_boolb() const;
  inline void clear_boolb();
  static const int kBoolbFieldNumber = 8;
  inline bool boolb() const;
  inline void set_boolb(bool value);
  
  // optional bool boolc = 9;
  inline bool has_boolc() const;
  inline void clear_boolc();
  static const int kBoolcFieldNumber = 9;
  inline bool boolc() const;
  inline void set_boolc(bool value);
  
  // optional double rate = 10;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 10;
  inline double rate() const;
  inline void set_rate(double value);
  
  // optional .CncAxes axes = 11;
  inline bool has_axes() const;
  inline void clear_axes();
  static const int kAxesFieldNumber = 11;
  inline const ::CncAxes& axes() const;
  inline ::CncAxes* mutable_axes();
  inline ::CncAxes* release_axes();
  
  // @@protoc_insertion_point(class_scope:CncCmdBuf)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_string();
  inline void clear_has_string();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_boolx();
  inline void clear_has_boolx();
  inline void set_has_booly();
  inline void clear_has_booly();
  inline void set_has_boolz();
  inline void clear_has_boolz();
  inline void set_has_boola();
  inline void clear_has_boola();
  inline void set_has_boolb();
  inline void clear_has_boolb();
  inline void set_has_boolc();
  inline void clear_has_boolc();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_axes();
  inline void clear_has_axes();
  
  ::std::string* string_;
  ::google::protobuf::uint32 type_;
  bool state_;
  bool boolx_;
  bool booly_;
  bool boolz_;
  double rate_;
  ::CncAxes* axes_;
  bool boola_;
  bool boolb_;
  bool boolc_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_cncstatebuf_2eproto();
  friend void protobuf_AssignDesc_cncstatebuf_2eproto();
  friend void protobuf_ShutdownFile_cncstatebuf_2eproto();
  
  void InitAsDefaultInstance();
  static CncCmdBuf* default_instance_;
};
// ===================================================================


// ===================================================================

// CncAxes

// optional double x = 1;
inline bool CncAxes::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CncAxes::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CncAxes::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CncAxes::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double CncAxes::x() const {
  return x_;
}
inline void CncAxes::set_x(double value) {
  set_has_x();
  x_ = value;
}

// optional double y = 2;
inline bool CncAxes::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CncAxes::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CncAxes::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CncAxes::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double CncAxes::y() const {
  return y_;
}
inline void CncAxes::set_y(double value) {
  set_has_y();
  y_ = value;
}

// optional double z = 3;
inline bool CncAxes::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CncAxes::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CncAxes::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CncAxes::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double CncAxes::z() const {
  return z_;
}
inline void CncAxes::set_z(double value) {
  set_has_z();
  z_ = value;
}

// optional double a = 4;
inline bool CncAxes::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CncAxes::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CncAxes::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CncAxes::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline double CncAxes::a() const {
  return a_;
}
inline void CncAxes::set_a(double value) {
  set_has_a();
  a_ = value;
}

// optional double b = 5;
inline bool CncAxes::has_b() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CncAxes::set_has_b() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CncAxes::clear_has_b() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CncAxes::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline double CncAxes::b() const {
  return b_;
}
inline void CncAxes::set_b(double value) {
  set_has_b();
  b_ = value;
}

// optional double c = 6;
inline bool CncAxes::has_c() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CncAxes::set_has_c() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CncAxes::clear_has_c() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CncAxes::clear_c() {
  c_ = 0;
  clear_has_c();
}
inline double CncAxes::c() const {
  return c_;
}
inline void CncAxes::set_c(double value) {
  set_has_c();
  c_ = value;
}

// -------------------------------------------------------------------

// CncStateBuf

// optional .CncAxes abs_pos = 1;
inline bool CncStateBuf::has_abs_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CncStateBuf::set_has_abs_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CncStateBuf::clear_has_abs_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CncStateBuf::clear_abs_pos() {
  if (abs_pos_ != NULL) abs_pos_->::CncAxes::Clear();
  clear_has_abs_pos();
}
inline const ::CncAxes& CncStateBuf::abs_pos() const {
  return abs_pos_ != NULL ? *abs_pos_ : *default_instance_->abs_pos_;
}
inline ::CncAxes* CncStateBuf::mutable_abs_pos() {
  set_has_abs_pos();
  if (abs_pos_ == NULL) abs_pos_ = new ::CncAxes;
  return abs_pos_;
}
inline ::CncAxes* CncStateBuf::release_abs_pos() {
  clear_has_abs_pos();
  ::CncAxes* temp = abs_pos_;
  abs_pos_ = NULL;
  return temp;
}

// optional .CncAxes offset_work = 2;
inline bool CncStateBuf::has_offset_work() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CncStateBuf::set_has_offset_work() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CncStateBuf::clear_has_offset_work() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CncStateBuf::clear_offset_work() {
  if (offset_work_ != NULL) offset_work_->::CncAxes::Clear();
  clear_has_offset_work();
}
inline const ::CncAxes& CncStateBuf::offset_work() const {
  return offset_work_ != NULL ? *offset_work_ : *default_instance_->offset_work_;
}
inline ::CncAxes* CncStateBuf::mutable_offset_work() {
  set_has_offset_work();
  if (offset_work_ == NULL) offset_work_ = new ::CncAxes;
  return offset_work_;
}
inline ::CncAxes* CncStateBuf::release_offset_work() {
  clear_has_offset_work();
  ::CncAxes* temp = offset_work_;
  offset_work_ = NULL;
  return temp;
}

// optional .CncAxes offset_fixture = 3;
inline bool CncStateBuf::has_offset_fixture() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CncStateBuf::set_has_offset_fixture() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CncStateBuf::clear_has_offset_fixture() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CncStateBuf::clear_offset_fixture() {
  if (offset_fixture_ != NULL) offset_fixture_->::CncAxes::Clear();
  clear_has_offset_fixture();
}
inline const ::CncAxes& CncStateBuf::offset_fixture() const {
  return offset_fixture_ != NULL ? *offset_fixture_ : *default_instance_->offset_fixture_;
}
inline ::CncAxes* CncStateBuf::mutable_offset_fixture() {
  set_has_offset_fixture();
  if (offset_fixture_ == NULL) offset_fixture_ = new ::CncAxes;
  return offset_fixture_;
}
inline ::CncAxes* CncStateBuf::release_offset_fixture() {
  clear_has_offset_fixture();
  ::CncAxes* temp = offset_fixture_;
  offset_fixture_ = NULL;
  return temp;
}

// optional double lin_unit_scale = 4;
inline bool CncStateBuf::has_lin_unit_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CncStateBuf::set_has_lin_unit_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CncStateBuf::clear_has_lin_unit_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CncStateBuf::clear_lin_unit_scale() {
  lin_unit_scale_ = 0;
  clear_has_lin_unit_scale();
}
inline double CncStateBuf::lin_unit_scale() const {
  return lin_unit_scale_;
}
inline void CncStateBuf::set_lin_unit_scale(double value) {
  set_has_lin_unit_scale();
  lin_unit_scale_ = value;
}

// optional bool control_on = 7;
inline bool CncStateBuf::has_control_on() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CncStateBuf::set_has_control_on() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CncStateBuf::clear_has_control_on() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CncStateBuf::clear_control_on() {
  control_on_ = false;
  clear_has_control_on();
}
inline bool CncStateBuf::control_on() const {
  return control_on_;
}
inline void CncStateBuf::set_control_on(bool value) {
  set_has_control_on();
  control_on_ = value;
}

// optional bool machine_connected = 8;
inline bool CncStateBuf::has_machine_connected() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CncStateBuf::set_has_machine_connected() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CncStateBuf::clear_has_machine_connected() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CncStateBuf::clear_machine_connected() {
  machine_connected_ = false;
  clear_has_machine_connected();
}
inline bool CncStateBuf::machine_connected() const {
  return machine_connected_;
}
inline void CncStateBuf::set_machine_connected(bool value) {
  set_has_machine_connected();
  machine_connected_ = value;
}

// optional bool paused = 9;
inline bool CncStateBuf::has_paused() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CncStateBuf::set_has_paused() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CncStateBuf::clear_has_paused() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CncStateBuf::clear_paused() {
  paused_ = false;
  clear_has_paused();
}
inline bool CncStateBuf::paused() const {
  return paused_;
}
inline void CncStateBuf::set_paused(bool value) {
  set_has_paused();
  paused_ = value;
}

// optional bool optional_stop = 10;
inline bool CncStateBuf::has_optional_stop() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CncStateBuf::set_has_optional_stop() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CncStateBuf::clear_has_optional_stop() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CncStateBuf::clear_optional_stop() {
  optional_stop_ = false;
  clear_has_optional_stop();
}
inline bool CncStateBuf::optional_stop() const {
  return optional_stop_;
}
inline void CncStateBuf::set_optional_stop(bool value) {
  set_has_optional_stop();
  optional_stop_ = value;
}

// optional bool block_delete = 11;
inline bool CncStateBuf::has_block_delete() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CncStateBuf::set_has_block_delete() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CncStateBuf::clear_has_block_delete() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CncStateBuf::clear_block_delete() {
  block_delete_ = false;
  clear_has_block_delete();
}
inline bool CncStateBuf::block_delete() const {
  return block_delete_;
}
inline void CncStateBuf::set_block_delete(bool value) {
  set_has_block_delete();
  block_delete_ = value;
}

// optional bool running = 12;
inline bool CncStateBuf::has_running() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CncStateBuf::set_has_running() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CncStateBuf::clear_has_running() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CncStateBuf::clear_running() {
  running_ = false;
  clear_has_running();
}
inline bool CncStateBuf::running() const {
  return running_;
}
inline void CncStateBuf::set_running(bool value) {
  set_has_running();
  running_ = value;
}

// optional int32 currentline = 13;
inline bool CncStateBuf::has_currentline() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CncStateBuf::set_has_currentline() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CncStateBuf::clear_has_currentline() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CncStateBuf::clear_currentline() {
  currentline_ = 0;
  clear_has_currentline();
}
inline ::google::protobuf::int32 CncStateBuf::currentline() const {
  return currentline_;
}
inline void CncStateBuf::set_currentline(::google::protobuf::int32 value) {
  set_has_currentline();
  currentline_ = value;
}

// -------------------------------------------------------------------

// CncCmdBuf

// required uint32 type = 1;
inline bool CncCmdBuf::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CncCmdBuf::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CncCmdBuf::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CncCmdBuf::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CncCmdBuf::type() const {
  return type_;
}
inline void CncCmdBuf::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string string = 2;
inline bool CncCmdBuf::has_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CncCmdBuf::set_has_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CncCmdBuf::clear_has_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CncCmdBuf::clear_string() {
  if (string_ != &::google::protobuf::internal::kEmptyString) {
    string_->clear();
  }
  clear_has_string();
}
inline const ::std::string& CncCmdBuf::string() const {
  return *string_;
}
inline void CncCmdBuf::set_string(const ::std::string& value) {
  set_has_string();
  if (string_ == &::google::protobuf::internal::kEmptyString) {
    string_ = new ::std::string;
  }
  string_->assign(value);
}
inline void CncCmdBuf::set_string(const char* value) {
  set_has_string();
  if (string_ == &::google::protobuf::internal::kEmptyString) {
    string_ = new ::std::string;
  }
  string_->assign(value);
}
inline void CncCmdBuf::set_string(const char* value, size_t size) {
  set_has_string();
  if (string_ == &::google::protobuf::internal::kEmptyString) {
    string_ = new ::std::string;
  }
  string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CncCmdBuf::mutable_string() {
  set_has_string();
  if (string_ == &::google::protobuf::internal::kEmptyString) {
    string_ = new ::std::string;
  }
  return string_;
}
inline ::std::string* CncCmdBuf::release_string() {
  clear_has_string();
  if (string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_;
    string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool state = 3;
inline bool CncCmdBuf::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CncCmdBuf::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CncCmdBuf::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CncCmdBuf::clear_state() {
  state_ = false;
  clear_has_state();
}
inline bool CncCmdBuf::state() const {
  return state_;
}
inline void CncCmdBuf::set_state(bool value) {
  set_has_state();
  state_ = value;
}

// optional bool boolx = 4;
inline bool CncCmdBuf::has_boolx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CncCmdBuf::set_has_boolx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CncCmdBuf::clear_has_boolx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CncCmdBuf::clear_boolx() {
  boolx_ = false;
  clear_has_boolx();
}
inline bool CncCmdBuf::boolx() const {
  return boolx_;
}
inline void CncCmdBuf::set_boolx(bool value) {
  set_has_boolx();
  boolx_ = value;
}

// optional bool booly = 5;
inline bool CncCmdBuf::has_booly() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CncCmdBuf::set_has_booly() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CncCmdBuf::clear_has_booly() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CncCmdBuf::clear_booly() {
  booly_ = false;
  clear_has_booly();
}
inline bool CncCmdBuf::booly() const {
  return booly_;
}
inline void CncCmdBuf::set_booly(bool value) {
  set_has_booly();
  booly_ = value;
}

// optional bool boolz = 6;
inline bool CncCmdBuf::has_boolz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CncCmdBuf::set_has_boolz() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CncCmdBuf::clear_has_boolz() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CncCmdBuf::clear_boolz() {
  boolz_ = false;
  clear_has_boolz();
}
inline bool CncCmdBuf::boolz() const {
  return boolz_;
}
inline void CncCmdBuf::set_boolz(bool value) {
  set_has_boolz();
  boolz_ = value;
}

// optional bool boola = 7;
inline bool CncCmdBuf::has_boola() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CncCmdBuf::set_has_boola() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CncCmdBuf::clear_has_boola() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CncCmdBuf::clear_boola() {
  boola_ = false;
  clear_has_boola();
}
inline bool CncCmdBuf::boola() const {
  return boola_;
}
inline void CncCmdBuf::set_boola(bool value) {
  set_has_boola();
  boola_ = value;
}

// optional bool boolb = 8;
inline bool CncCmdBuf::has_boolb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CncCmdBuf::set_has_boolb() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CncCmdBuf::clear_has_boolb() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CncCmdBuf::clear_boolb() {
  boolb_ = false;
  clear_has_boolb();
}
inline bool CncCmdBuf::boolb() const {
  return boolb_;
}
inline void CncCmdBuf::set_boolb(bool value) {
  set_has_boolb();
  boolb_ = value;
}

// optional bool boolc = 9;
inline bool CncCmdBuf::has_boolc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CncCmdBuf::set_has_boolc() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CncCmdBuf::clear_has_boolc() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CncCmdBuf::clear_boolc() {
  boolc_ = false;
  clear_has_boolc();
}
inline bool CncCmdBuf::boolc() const {
  return boolc_;
}
inline void CncCmdBuf::set_boolc(bool value) {
  set_has_boolc();
  boolc_ = value;
}

// optional double rate = 10;
inline bool CncCmdBuf::has_rate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CncCmdBuf::set_has_rate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CncCmdBuf::clear_has_rate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CncCmdBuf::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline double CncCmdBuf::rate() const {
  return rate_;
}
inline void CncCmdBuf::set_rate(double value) {
  set_has_rate();
  rate_ = value;
}

// optional .CncAxes axes = 11;
inline bool CncCmdBuf::has_axes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CncCmdBuf::set_has_axes() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CncCmdBuf::clear_has_axes() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CncCmdBuf::clear_axes() {
  if (axes_ != NULL) axes_->::CncAxes::Clear();
  clear_has_axes();
}
inline const ::CncAxes& CncCmdBuf::axes() const {
  return axes_ != NULL ? *axes_ : *default_instance_->axes_;
}
inline ::CncAxes* CncCmdBuf::mutable_axes() {
  set_has_axes();
  if (axes_ == NULL) axes_ = new ::CncAxes;
  return axes_;
}
inline ::CncAxes* CncCmdBuf::release_axes() {
  clear_has_axes();
  ::CncAxes* temp = axes_;
  axes_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cncstatebuf_2eproto__INCLUDED
